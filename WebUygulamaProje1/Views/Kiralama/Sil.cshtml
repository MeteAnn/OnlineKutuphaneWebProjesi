@model Kiralama //Kitap tipinde nesne oluşturuyor Dependency Injection yapar yani bizim burada new ile bir şey yazmamıza gerek kalmadan oluşturuyor.


<form method="post">
    @*Bu Post Actionu Bu viewin Controllerını çağırır. Bunun Controllerı KitapTuruControllerdır. Yani biz bunu yazdığımız için bu gidiyor KitapController daki Ekle ismin de ama HTTPPOST olan method arıyor.  *@


    <div class="border p-3 mt-5">
        
        <div class="row pb-3">

            <h2 class="text-primary">Kiralama Kayıt Sil</h2>
            <hr />


        </div>

        <div class="mb-3">

            <label asp-for="OgrenciId" class="p-0"></label>


            <input asp-for="OgrenciId" disabled  class="form-control" /> 
            
        </div>
        <div class="mb-3">

            <label asp-for="KitapId" class="p-0"></label>


            <select asp-for="KitapId" asp-items="ViewBag.KitapList" disabled class="form-select"></select>



        </div>

      
       
       



        <button type="submit" class="btn btn-lg btn-danger" style="width:250px">Kiralama Kayıt Sil</button>

        <a asp-controller="Kiralama" asp-action="Index" class="btn btn-lg btn-primary" style="width:250px">Kiralamalara Geri Dön</a> @*bu kod bir HTML bağlantısını temsil eder. Bu bağlantı, "Kitap" Controller'ındaki "Ekle" Action'ına yönlendirilir ve "Yeni Kitap Oluştur" metni içeren bir düğme gibi görünen bir bağlantıdır. Bu bağlantı tıklandığında, "Ekle" Action'ı çalışır ve ilgili işlem gerçekleştirilir.*@



          


   
       

    </div>

    




</form>

@section Scripts {
    @{


        <partial name="_ValidationScriptsPartial" />
    }


    } @*bu şu manaya gelir buradaki validation javascript içerisindeki kontrollerini otomatik olarak bunun içine gömdük manasına gelir. JavaScript kütüphanelerini dahil etmek için kullanılır. Yani bu javascript gidiyor required de olan hata mesajını alıyor ve gösteriyor.Yani özetle kullanıcı girdilerini front end tarafında kontrol etmiş oluyoruz.*@.